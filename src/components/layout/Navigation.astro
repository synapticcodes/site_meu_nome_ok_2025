---
interface NavItem {
  label: string;
  href: string;
}

interface Props {
  navItems: readonly NavItem[];
  cta: {
    label: string;
    href: string;
  };
}

const { navItems, cta } = Astro.props as Props;
---
<header
  id="site-navigation"
  class="relative sticky top-0 z-50 border-b border-neutral-200/60 bg-white shadow-sm md:border-white/30"
>
  <div class="mx-auto flex w-full max-w-6xl items-center justify-between gap-6 px-6 py-4 md:py-5">
    <a href="/" class="flex items-center gap-3 text-primary" aria-label="Meu Nome OK">
      <img src="/icons/logo.png" alt="Meu Nome OK" class="h-10 w-auto" />
      <span class="font-display text-lg font-semibold">Meu Nome OK</span>
    </a>
    <nav aria-label="Principal" class="hidden items-center gap-6 md:flex">
      <ul class="flex items-center gap-4 text-sm font-medium text-neutral-700">
        {navItems.map((item) => (
          <li key={item.href}>
            <a
              href={item.href}
              class="rounded-full px-4 py-2 transition hover:bg-primary/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
            >
              {item.label}
            </a>
          </li>
        ))}
      </ul>
    </nav>
    <div class="hidden md:block">
      <a
        href={cta.href}
        class="inline-flex items-center justify-center rounded-full bg-gradient-to-r from-primary to-primary-dark px-6 py-2.5 text-sm font-semibold text-white shadow-[0_20px_40px_-28px_rgba(102,42,231,0.6)] transition duration-200 hover:-translate-y-0.5 hover:shadow-[0_26px_60px_-34px_rgba(102,42,231,0.5)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
      >
        {cta.label}
      </a>
    </div>
    <div class="md:hidden">
      <button
        type="button"
        aria-label="Abrir menu"
        aria-expanded="false"
        aria-controls="mobile-menu"
        data-nav-toggle
        class="inline-flex h-10 w-10 items-center justify-center rounded-full border border-neutral-200 bg-white text-primary shadow-sm transition hover:border-primary/40 focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
      >
        <span class="sr-only">Menu</span>
        <svg
          class="h-5 w-5"
          fill="none"
          stroke="currentColor"
          stroke-width="1.8"
          viewBox="0 0 24 24"
          aria-hidden="true"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 7h16M4 12h16M4 17h16" />
        </svg>
      </button>
    </div>
  </div>
  <div
    id="mobile-menu"
    data-nav-menu
    class="absolute inset-x-0 top-full px-6 pb-6 transition-all duration-200 md:hidden pointer-events-none opacity-0 -translate-y-2"
    aria-hidden="true"
  >
    <div class="mx-auto w-full max-w-6xl">
      <div class="rounded-3xl border border-neutral-100 bg-white p-6 shadow-soft">
        <ul class="flex flex-col gap-4 text-base font-medium text-neutral-700">
          {navItems.map((item) => (
            <li key={`mobile-${item.href}`}>
              <a
                href={item.href}
                data-nav-link
                class="flex items-center justify-between rounded-full px-4 py-3 transition hover:bg-primary/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
              >
                {item.label}
                <svg
                  class="h-4 w-4 text-primary"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" d="m9 5 7 7-7 7" />
                </svg>
              </a>
            </li>
          ))}
        </ul>
        <a
          href={cta.href}
          data-nav-link
          class="mt-6 inline-flex w-full items-center justify-center rounded-full bg-gradient-to-r from-primary to-primary-dark px-6 py-3 text-base font-semibold text-white shadow-[0_22px_50px_-32px_rgba(102,42,231,0.6)] transition duration-200 hover:-translate-y-0.5 hover:shadow-[0_28px_60px_-36px_rgba(102,42,231,0.55)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2"
        >
          {cta.label}
        </a>
      </div>
    </div>
  </div>
</header>
<script is:inline>
  (() => {
    const root = document.getElementById('site-navigation');
    if (!root) return;

    const toggleButton = root.querySelector('[data-nav-toggle]');
    const menu = root.querySelector('[data-nav-menu]');
    if (!(toggleButton instanceof HTMLButtonElement) || !(menu instanceof HTMLElement)) {
      return;
    }

    const links = Array.from(menu.querySelectorAll('[data-nav-link]'));

    const setOpenState = (open) => {
      toggleButton.setAttribute('aria-expanded', open ? 'true' : 'false');
      menu.setAttribute('aria-hidden', open ? 'false' : 'true');
      menu.classList.toggle('pointer-events-none', !open);
      menu.classList.toggle('opacity-0', !open);
      menu.classList.toggle('-translate-y-2', !open);
    };

    let open = false;
    const toggle = () => {
      open = !open;
      setOpenState(open);
    };

    toggleButton.addEventListener('click', toggle);
    links.forEach((link) =>
      link.addEventListener('click', () => {
        open = false;
        setOpenState(false);
      })
    );
  })();
</script>
